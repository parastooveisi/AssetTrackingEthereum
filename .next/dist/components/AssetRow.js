"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require("semantic-ui-react");

var _web = require("../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

var _tracker = require("../ethereum/tracker");

var _tracker2 = _interopRequireDefault(_tracker);

var _routes = require("../routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/components/AssetRow.js";


var AssetRow = function (_Component) {
  (0, _inherits3.default)(AssetRow, _Component);

  function AssetRow() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, AssetRow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AssetRow.__proto__ || (0, _getPrototypeOf2.default)(AssetRow)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      loading: false
    }, _this.confirm = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var accounts;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.setState({ loading: true });
              _context.next = 3;
              return _web2.default.eth.getAccounts();

            case 3:
              accounts = _context.sent;

              _tracker2.default.methods.confirmReceived(_this.props.asset.id).send({
                from: accounts[0],
                gas: "1000000"
              });
              _this.setState({ loading: false });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, _this2);
    })), _this.history = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var id;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              id = _this.props.asset.id;

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, _this2);
    })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(AssetRow, [{
    key: "render",
    value: function render() {
      var Row = _semanticUiReact.Table.Row,
          Cell = _semanticUiReact.Table.Cell;

      return this.props.asset.id, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      }, _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        }
      }, this.props.asset.id), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 31
        }
      }, this.props.asset.name), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32
        }
      }, this.props.asset.description), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33
        }
      }, this.props.asset.manufacture), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, this.props.asset.price), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }, this.props.asset.owner), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }, _react2.default.createElement(_routes.Link, { route: "/assets/history/" + this.props.asset.id, __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      }, _react2.default.createElement("a", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { basic: true, value: this.props.asset.id,
        content: "History",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      })))), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { color: "green", basic: true, onClick: this.confirm, loading: this.state.loading, __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, "Confirm")));
    }
  }]);

  return AssetRow;
}(_react.Component);

exports.default = AssetRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQXNzZXRSb3ciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsImxvYWRpbmciLCJjb25maXJtIiwibWFyayIsIl9jYWxsZWUiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJzZXRTdGF0ZSIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsIm1ldGhvZHMiLCJjb25maXJtUmVjZWl2ZWQiLCJwcm9wcyIsImFzc2V0IiwiaWQiLCJzZW5kIiwiZnJvbSIsImdhcyIsInN0b3AiLCJoaXN0b3J5IiwiX2NhbGxlZTIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIlJvdyIsIkNlbGwiLCJjcmVhdGVFbGVtZW50IiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJtYW51ZmFjdHVyZSIsInByaWNlIiwib3duZXIiLCJyb3V0ZSIsImJhc2ljIiwiY29udGVudCIsImNvbG9yIiwib25DbGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUxBLElBQUlBLGVBQWUsNkVBQW5COzs7QUFPQSxJQUFJQyxXQUFXLFVBQVVDLFVBQVYsRUFBc0I7QUFDbkMsMEJBQVVELFFBQVYsRUFBb0JDLFVBQXBCOztBQUVBLFdBQVNELFFBQVQsR0FBb0I7QUFDbEIsUUFBSUUsSUFBSjtBQUFBLFFBQ0lD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