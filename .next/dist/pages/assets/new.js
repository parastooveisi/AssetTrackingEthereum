"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require("semantic-ui-react");

var _tracker = require("../../ethereum/tracker");

var _tracker2 = _interopRequireDefault(_tracker);

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require("../../routes");

var _web = require("../../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain (copy)/pages/assets/new.js?entry";


var AssetNew = function (_Component) {
  (0, _inherits3.default)(AssetNew, _Component);

  function AssetNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, AssetNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AssetNew.__proto__ || (0, _getPrototypeOf2.default)(AssetNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      name: "",
      description: "",
      manufacturer: "",
      price: "",
      zipcode: "",
      amountToStake: "",
      loading: false,
      errorMessage: ""
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var _this$state, name, description, manufacturer, price, zipcode, amountToStake, accounts, d;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();
                _this$state = _this.state, name = _this$state.name, description = _this$state.description, manufacturer = _this$state.manufacturer, price = _this$state.price, zipcode = _this$state.zipcode, amountToStake = _this$state.amountToStake;
                //console.log(id);

                _this.setState({ loading: true, errorMessage: "" });

                _context.prev = 3;
                _context.next = 6;
                return _web2.default.eth.getAccounts();

              case 6:
                accounts = _context.sent;

                _web2.default.eth.defaultAccount = '0xcc6Bfe0C579416A127222516cC8532e984af0e6a';
                console.log("ssssssss", _web2.default.eth.defaultAccount);
                console.log("sasad", accounts);
                _context.next = 12;
                return _tracker2.default.methods.createAsset(name, description, manufacturer, price, zipcode).send({
                  from: _web2.default.eth.defaultAccount,
                  value: _web2.default.utils.toWei(_this.state.amountToStake, "ether"),
                  gas: "1000000"
                });

              case 12:
                d = new Date().toLocaleTimeString(); // for now

                console.log(d);

                //   var event = tracker.AssetCreate().watch(function(error, result) {
                //     console.log(result);
                // });

                _routes.Router.pushRoute("/");
                _context.next = 20;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](3);

                _this.setState({ errorMessage: _context.t0.message });

              case 20:
                _this.setState({ loading: false });

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, _this2, [[3, 17]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(AssetNew, [{
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, _react2.default.createElement("h3", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, " Register New Product "), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, _react2.default.createElement("label", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, "Name"), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.name,
        onChange: function onChange(event) {
          return _this3.setState({ name: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, _react2.default.createElement("label", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, "Description"), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.description,
        onChange: function onChange(event) {
          return _this3.setState({ description: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, _react2.default.createElement("label", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, "Manufacturer"), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.manufacturer,
        onChange: function onChange(event) {
          return _this3.setState({ manufacturer: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, _react2.default.createElement("label", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, "Price"), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.price,
        onChange: function onChange(event) {
          return _this3.setState({ price: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 95
        }
      }, _react2.default.createElement("label", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }, "Coordinates"), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.zipcode,
        onChange: function onChange(event) {
          return _this3.setState({ zipcode: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 97
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 102
        }
      }, _react2.default.createElement("label", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 103
        }
      }, "Stake"), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.amountToStake,
        onChange: function onChange(event) {
          return _this3.setState({ amountToStake: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 104
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: "Oops!", content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 110
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
          fileName: _jsxFileName,
          lineNumber: 111
        }
      }, "Create")));
    }
  }]);

  return AssetNew;
}(_react.Component);

exports.default = AssetNew;

// <Form.Field>
//   <label>ID</label>
//   <Input
//     value={this.state.id}
//     onChange={event => this.setState({ id: event.target.value })}
//   />
// </Form.Field>
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQXNzZXROZXciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsIm1hbnVmYWN0dXJlciIsInByaWNlIiwiemlwY29kZSIsImFtb3VudFRvU3Rha2UiLCJsb2FkaW5nIiwiZXJyb3JNZXNzYWdlIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJfdGhpcyRzdGF0ZSIsImFjY291bnRzIiwiZCIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwiZGVmYXVsdEFjY291bnQiLCJjb25zb2xlIiwibG9nIiwibWV0aG9kcyIsImNyZWF0ZUFzc2V0Iiwic2VuZCIsImZyb20iLCJ2YWx1ZSIsInV0aWxzIiwidG9XZWkiLCJnYXMiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwicHVzaFJvdXRlIiwidDAiLCJtZXNzYWdlIiwic3RvcCIsIl94Iiwia2V5IiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZXJyb3IiLCJGaWVsZCIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwiaGVhZGVyIiwiY29udGVudCIsInByaW1hcnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7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U0FBU0EsUUFBVCxDQUFrQnpDLEtBQWxCLEVBQXlCO0FBQ2pDLGlCQUFPa0MsT0FBT3hCLFFBQVAsQ0FBZ0IsRUFBRWxCLFNBQVNRLE1BQU0wQyxNQUFOLENBQWFyQixLQUF4QixFQUFoQixDQUFQO0FBQ0QsU0FKd0I7QUFLekJlLGtCQUFVO0FBQ1JDLG9CQUFVcEUsWUFERjtBQUVScUUsc0JBQVk7QUFGSjtBQUxlLE9BQTNCLENBbEJGLENBM0hGLEVBd0pFLGdCQUFNSCxhQUFOLENBQ0Usc0JBQUtLLEtBRFAsRUFFRTtBQUNFSixrQkFBVTtBQUNSQyxvQkFBVXBFLFlBREY7QUFFUnFFLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsZ0JBQU1ILGFBQU4sQ0FDRSxPQURGLEVBRUU7QUFDRUMsa0JBQVU7QUFDUkMsb0JBQVVwRSxZQURGO0FBRVJxRSxzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLE9BUkYsQ0FSRixFQWtCRSxnQkFBTUgsYUFBTix5QkFBMkI7QUFDekJkLGVBQU8sS0FBS2xDLEtBQUwsQ0FBV00sYUFETztBQUV6QmdELGtCQUFVLFNBQVNBLFFBQVQsQ0FBa0J6QyxLQUFsQixFQUF5QjtBQUNqQyxpQkFBT2tDLE9BQU94QixRQUFQLENBQWdCLEVBQUVqQixlQUFlTyxNQUFNMEMsTUFBTixDQUFhckIsS0FBOUIsRUFBaEIsQ0FBUDtBQUNELFNBSndCO0FBS3pCZSxrQkFBVTtBQUNSQyxvQkFBVXBFLFlBREY7QUFFUnFFLHNCQUFZO0FBRko7QUFMZSxPQUEzQixDQWxCRixDQXhKRixFQXFMRSxnQkFBTUgsYUFBTiwyQkFBNkIsRUFBRUksT0FBTyxJQUFULEVBQWVJLFFBQVEsT0FBdkIsRUFBZ0NDLFNBQVMsS0FBS3pELEtBQUwsQ0FBV1EsWUFBcEQsRUFBa0V5QyxVQUFVO0FBQ3JHQyxvQkFBVXBFLFlBRDJGO0FBRXJHcUUsc0JBQVk7QUFGeUY7QUFBNUUsT0FBN0IsQ0FyTEYsRUEwTEUsZ0JBQU1ILGFBQU4sMEJBRUUsRUFBRVUsU0FBUyxJQUFYLEVBQWlCbkQsU0FBUyxLQUFLUCxLQUFMLENBQVdPLE9BQXJDLEVBQThDMEMsVUFBVTtBQUNwREMsb0JBQVVwRSxZQUQwQztBQUVwRHFFLHNCQUFZO0FBRndDO0FBQXhELE9BRkYsRUFPRSxRQVBGLENBMUxGLENBbEJLLENBQVA7QUF1TkQ7QUE1TnFCLEdBQUQsQ0FBdkI7O0FBK05BLFNBQU9wRSxRQUFQO0FBQ0QsQ0EzVGMsa0JBQWY7O2tCQTZUZUEsUTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ1bmtub3duIn0=