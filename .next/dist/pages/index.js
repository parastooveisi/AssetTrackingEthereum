"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require("semantic-ui-react");

var _tracker = require("../ethereum/tracker");

var _tracker2 = _interopRequireDefault(_tracker);

var _Layout = require("../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require("../routes");

var _web = require("../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

var _AssetRow = require("../components/AssetRow");

var _AssetRow2 = _interopRequireDefault(_AssetRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/pages/index.js?entry";


var AssetTracker = function (_Component) {
  (0, _inherits3.default)(AssetTracker, _Component);

  function AssetTracker() {
    (0, _classCallCheck3.default)(this, AssetTracker);

    return (0, _possibleConstructorReturn3.default)(this, (AssetTracker.__proto__ || (0, _getPrototypeOf2.default)(AssetTracker)).apply(this, arguments));
  }

  (0, _createClass3.default)(AssetTracker, [{
    key: "renderbuyers",
    value: function renderbuyers() {
      var items = this.props.buyers.map(function (address) {
        return {
          header: address,
          description: "",
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      });
    }
  }, {
    key: "renderproducers",
    value: function renderproducers() {
      var items = this.props.producers.map(function (address) {
        return {
          header: address,
          description: "",
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      });
    }
  }, {
    key: "renderRows",
    value: function renderRows() {
      return this.props.assets.map(function (asset, index) {
        return _react2.default.createElement(_AssetRow2.default, {
          key: index,
          id: index,
          asset: asset
          //address={this.props.owner}
          , __source: {
            fileName: _jsxFileName,
            lineNumber: 61
          }
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var Header = _semanticUiReact.Table.Header,
          Row = _semanticUiReact.Table.Row,
          HeaderCell = _semanticUiReact.Table.HeaderCell,
          Body = _semanticUiReact.Table.Body;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }, _react2.default.createElement("h3", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, " List of all producers! "), _react2.default.createElement("div", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, this.renderproducers()), _react2.default.createElement("div", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }, _react2.default.createElement("link", {
        rel: "stylesheet",
        href: "//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.css",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }), _react2.default.createElement("h3", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      }, " List of all Purchesers! "), this.renderbuyers()), _react2.default.createElement("h3", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, " Asset details! "), _react2.default.createElement(_semanticUiReact.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, _react2.default.createElement(Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      }, _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 91
        }
      }, "ID"), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }, "Name"), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }, "Description"), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }, "Manufacturer"), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 95
        }
      }, "Price"), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }, "Address of Owner"))), _react2.default.createElement(Body, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        }
      }, this.renderRows())));
    }
  }], [{
    key: "getInitialProps",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var buyers, producers, assetCount, id, assets;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _tracker2.default.methods.getbuyers().call();

              case 2:
                buyers = _context.sent;
                _context.next = 5;
                return _tracker2.default.methods.getproducers().call();

              case 5:
                producers = _context.sent;
                _context.next = 8;
                return _tracker2.default.methods.assetsCount().call();

              case 8:
                assetCount = _context.sent;
                _context.next = 11;
                return _tracker2.default.methods.getid().call();

              case 11:
                id = _context.sent;

                console.log(id);
                // const info = await web3.eth.getBlock(blockNumber);
                // console.log(info);


                _context.next = 15;
                return _promise2.default.all(Array(parseInt(assetCount)).fill().map(function (element, index) {
                  return _tracker2.default.methods.assets(index).call();
                }));

              case 15:
                assets = _context.sent;
                return _context.abrupt("return", {
                  buyers: buyers,
                  producers: producers,
                  assets: assets,
                  assetCount: assetCount
                });

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return AssetTracker;
}(_react.Component);

exports.default = AssetTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQXNzZXRUcmFja2VyIiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJidXllcnMiLCJpdGVtcyIsInByb3BzIiwiYnV5ZXJzIiwibWFwIiwiYWRkcmVzcyIsImhlYWRlciIsImRlc2NyaXB0aW9uIiwiZmx1aWQiLCJjcmVhdGVFbGVtZW50IiwiR3JvdXAiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJlbmRlcnByb2R1Y2VycyIsInByb2R1Y2VycyIsInJlbmRlclJvd3MiLCJhc3NldHMiLCJhc3NldCIsImluZGV4IiwiaWQiLCJyZW5kZXIiLCJIZWFkZXIiLCJSb3ciLCJIZWFkZXJDZWxsIiwiQm9keSIsInJlbCIsImhyZWYiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJhc3NldENvdW50Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXRidXllcnMiLCJjYWxsIiwic2VudCIsImdldHByb2R1Y2VycyIsImFzc2V0c0NvdW50IiwiZ2V0aWQiLCJjb25zb2xlIiwibG9nIiwiYWxsIiwiQXJyYXkiLCJwYXJzZUludCIsImZpbGwiLCJlbGVtZW50IiwiYWJydXB0Iiwic3RvcCIsImdldEluaXRpYWxQcm9wcyIsIl94Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBUEEsSUFBSUEsZUFBZSwyRUFBbkI7OztBQVNBLElBQUlDLGVBQWUsVUFBVUMsVUFBVixFQUFzQjtBQUN2QywwQkFBVUQsWUFBVixFQUF3QkMsVUFBeEI7O0FBRUEsV0FBU0QsWUFB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