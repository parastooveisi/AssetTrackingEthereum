{"ast":null,"code":"var _jsxFileName = \"/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/pages/assets/history.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Layout from \"../../components/Layout\";\nimport { Card, Button, Table } from \"semantic-ui-react\";\nimport tracker from \"../../ethereum/tracker\";\nimport AssetRow from \"../../components/AssetRow\";\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport Polyline from 'google-map-react';\n\nclass History extends Component {\n  static async getInitialProps(props) {\n    const lengthOwners = await tracker.methods.lengthOwners(props.query.id).call();\n    let addresscounts = await tracker.methods.zipCounts().call();\n    let owners = await Promise.all(Array(parseInt(lengthOwners)).fill().map((element, index) => {\n      return tracker.methods.owners(props.query.id, index).call();\n    }));\n    console.log(owners);\n    let addressArray = await Promise.all(Array(parseInt(addresscounts)).fill().map((element, index) => {\n      return tracker.methods.zipcodes(props.query.id, index).call();\n    }));\n    const myLatLng = addressArray.map(coords => {\n      const [lat, lng] = coords.split(',').map(Number);\n      return {\n        lat,\n        lng\n      };\n    });\n    const address = {\n      addressArray\n    };\n    return {\n      lengthOwners,\n      owners,\n      myLatLng\n    };\n  }\n\n  renderMarkers(map, maps) {\n    let i;\n\n    for (i = 0; i < this.props.myLatLng.length; i++) {\n      let marker = new maps.Marker({\n        position: this.props.myLatLng[i],\n        map\n      });\n      let infowindow = new google.maps.InfoWindow({\n        content: \"Owner\" + (i + 1) + \": \" + this.props.owners[i]\n      });\n      marker.addListener('click', function () {\n        infowindow.open(map, marker);\n      });\n    }\n  }\n\n  renderPolylines(map, maps) {\n    /** Example of rendering geodesic polyline */\n    let geodesicPolyline = new maps.Polyline({\n      path: this.props.myLatLng,\n      geodesic: true,\n      strokeColor: '#00a1e1',\n      strokeOpacity: 1.0,\n      strokeWeight: 4,\n      icons: [{\n        icon: {\n          path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW\n        },\n        offset: '100%',\n        repeat: '20px'\n      }]\n    });\n    geodesicPolyline.setMap(map);\n  }\n\n  renderowners() {\n    const items = this.props.owners.map(address => {\n      return {\n        header: address,\n        description: \"\",\n        meta: \"Agriculture\",\n        fluid: true\n      };\n    });\n    return __jsx(Card.Group, {\n      items: items,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \" List of all previous owners! \"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.renderowners()), __jsx(\"div\", {\n      style: {\n        height: '70vh',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyBJ-5C-ZdpLtLcJ99wDloLSRqmsVxLrLrw'\n      },\n      defaultCenter: this.props.center,\n      defaultZoom: this.props.zoom,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => (this.renderMarkers(map, maps), this.renderPolylines(map, maps)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })));\n  }\n\n}\n\n_defineProperty(History, \"defaultProps\", {\n  center: {\n    lat: 52.13,\n    lng: -106.66\n  },\n  zoom: 6\n});\n\nexport default History;","map":{"version":3,"sources":["/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/pages/assets/history.js"],"names":["React","Fragment","Component","render","Layout","Card","Button","Table","tracker","AssetRow","Geocode","GoogleMapReact","Polyline","History","getInitialProps","props","lengthOwners","methods","query","id","call","addresscounts","zipCounts","owners","Promise","all","Array","parseInt","fill","map","element","index","console","log","addressArray","zipcodes","myLatLng","coords","lat","lng","split","Number","address","renderMarkers","maps","i","length","marker","Marker","position","infowindow","google","InfoWindow","content","addListener","open","renderPolylines","geodesicPolyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","icons","icon","SymbolPath","FORWARD_CLOSED_ARROW","offset","repeat","setMap","renderowners","items","header","description","meta","fluid","height","width","key","center","zoom"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Layout from \"../../components/Layout\";\nimport { Card, Button, Table } from \"semantic-ui-react\";\nimport tracker from \"../../ethereum/tracker\";\nimport AssetRow from \"../../components/AssetRow\";\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport Polyline from 'google-map-react';\n\n\nclass History extends Component {\n  static defaultProps = {\n    center: {\n      lat: 52.13,\n      lng: -106.66\n    },\n\n    zoom: 6\n  };\n\n  static async getInitialProps(props) {\n    const lengthOwners = await tracker.methods.lengthOwners(props.query.id).call();\n    let addresscounts = await tracker.methods.zipCounts().call()\n\n    let owners = await Promise.all(\n      Array(parseInt(lengthOwners))\n        .fill()\n        .map((element, index) => {\n          return tracker.methods.owners(props.query.id,index).call();\n        })\n    );\n    console.log(owners);\n\n    let addressArray = await Promise.all(\n      Array(parseInt(addresscounts))\n        .fill()\n        .map((element, index) => {\n          return tracker.methods.zipcodes(props.query.id,index).call();\n        })\n    );\n\n  const myLatLng = addressArray.map(coords => {\n    const [lat, lng] = coords.split(',').map(Number);\n    return {\n      lat,\n      lng\n    };\n  });\n\n    const address = {addressArray}\n\n  return {\n    lengthOwners,\n    owners,\n    myLatLng\n  };\n}\nrenderMarkers(map, maps) {\n\n  let i;\n  for(i = 0; i < this.props.myLatLng.length; i++){\n  let marker = new maps.Marker({\n    position: this.props.myLatLng[i],\n    map,\n  });\n  let infowindow = new google.maps.InfoWindow({\n    content: \"Owner\" + (i + 1) + \": \" + this.props.owners[i]\n  });\n  marker.addListener('click', function() {\n    infowindow.open(map, marker);\n  });\n  }\n}\n\nrenderPolylines (map, maps) {\n    /** Example of rendering geodesic polyline */\n    let geodesicPolyline = new maps.Polyline({\n      path: this.props.myLatLng,\n      geodesic: true,\n      strokeColor: '#00a1e1',\n      strokeOpacity: 1.0,\n      strokeWeight: 4,\n      icons: [{\n        icon: {path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW},\n        offset: '100%',\n        repeat: '20px'\n    }]\n    })\n    geodesicPolyline.setMap(map)\n  }\n\nrenderowners() {\n  const items = this.props.owners.map(address => {\n    return {\n      header: address,\n      description: \"\",\n      meta: \"Agriculture\",\n      fluid: true\n    };\n  });\n\n  return <Card.Group items={items} />;\n}\n  render(){\n\n   return(\n     <Layout>\n     <h3> List of all previous owners! </h3>\n     <div>\n     {this.renderowners()}\n     </div>\n     <div style={{ height: '70vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: 'AIzaSyBJ-5C-ZdpLtLcJ99wDloLSRqmsVxLrLrw' }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          yesIWantToUseGoogleMapApiInternals={true}\n          onGoogleApiLoaded={({map, maps}) => (this.renderMarkers(map, maps), this.renderPolylines(map, maps))}\n        >\n        </GoogleMapReact>\n       </div>\n     </Layout>\n  );\n  }\n\n}\nexport default History;\n"]},"metadata":{},"sourceType":"module"}