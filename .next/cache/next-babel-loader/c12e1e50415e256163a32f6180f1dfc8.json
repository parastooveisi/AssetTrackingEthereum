{"ast":null,"code":"var _jsxFileName = \"/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/pages/assets/transfer.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Message, Input, Table } from \"semantic-ui-react\";\nimport tracker from \"../../ethereum/tracker\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\nimport AssetRow from \"../../components/AssetRow\";\n\nclass TransferForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      id: \"\",\n      value: \"\",\n      zipcode: \"\",\n      errorMessage: \"\",\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: \"\"\n      });\n      const {\n        id,\n        zipcode,\n        value\n      } = this.state;\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await tracker.methods.transferProduct(id, zipcode).send({\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, \"ether\"),\n          gas: \"1000000\"\n        });\n        console.log(\"DDDDD\", id);\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false,\n        value: \"\"\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    const assetCount = await tracker.methods.assetsCount().call();\n    let assets = await Promise.all(Array(parseInt(assetCount)).fill().map((element, index) => {\n      return tracker.methods.assets(index).call();\n    }));\n    return {\n      assets,\n      assetCount\n    };\n  }\n\n  renderRows() {\n    return this.props.assets.map((asset, index) => {\n      return __jsx(AssetRow, {\n        key: index,\n        id: index,\n        asset: asset //address={this.props.owner}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, __jsx(HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"ID\"), __jsx(HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Name\"), __jsx(HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Description\"), __jsx(HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Manufacturer\"), __jsx(HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Price\"), __jsx(HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Address of Owner\"))), __jsx(Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.renderRows())), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: !!this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, __jsx(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"ID\"), __jsx(Input, {\n      value: this.state.id,\n      onChange: event => this.setState({\n        id: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), __jsx(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Coordinates\"), __jsx(Input, {\n      value: this.state.zipcode,\n      onChange: event => this.setState({\n        zipcode: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), __jsx(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Amount to stake\"), __jsx(Input, {\n      value: this.state.value,\n      onChange: event => this.setState({\n        value: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      primary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Confirm Purchase!\")));\n  }\n\n}\n\nexport default TransferForm;","map":{"version":3,"sources":["/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/pages/assets/transfer.js"],"names":["React","Component","Form","Button","Message","Input","Table","tracker","Layout","web3","Router","AssetRow","TransferForm","id","value","zipcode","errorMessage","loading","event","preventDefault","setState","state","accounts","eth","getAccounts","methods","transferProduct","send","from","utils","toWei","gas","console","log","err","message","getInitialProps","props","assetCount","assetsCount","call","assets","Promise","all","Array","parseInt","fill","map","element","index","renderRows","asset","render","Header","Row","HeaderCell","Body","onSubmit","target"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Message, Input, Table } from \"semantic-ui-react\";\nimport tracker from \"../../ethereum/tracker\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\nimport AssetRow from \"../../components/AssetRow\";\n\nclass TransferForm extends Component {\n  static async getInitialProps(props) {\n    const assetCount = await tracker.methods.assetsCount().call();\n\n    let assets = await Promise.all(\n      Array(parseInt(assetCount))\n        .fill()\n        .map((element, index) => {\n          return tracker.methods.assets(index).call();\n        })\n    );\n    return {\n      assets,\n      assetCount\n    };\n  }\n  state = {\n    id: \"\",\n    value: \"\",\n    zipcode: \"\",\n    errorMessage: \"\",\n    loading: false\n  };\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true, errorMessage: \"\" });\n    const { id, zipcode, value } = this.state;\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      await tracker.methods.transferProduct(id, zipcode).send({\n        from: accounts[0],\n        value: web3.utils.toWei(this.state.value, \"ether\"),\n        gas: \"1000000\"\n      });\n      console.log(\"DDDDD\", id)\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    }\n    this.setState({ loading: false, value: \"\" });\n  };\n  renderRows() {\n    return this.props.assets.map((asset, index) => {\n      return (\n        <AssetRow\n          key={index}\n          id={index}\n          asset={asset}\n          //address={this.props.owner}\n        />\n      );\n    });\n  }\n\n  render() {\n    const { Header, Row, HeaderCell, Body } = Table;\n\n    return (\n      <Layout>\n        <Table>\n          <Header>\n            <Row>\n              <HeaderCell>ID</HeaderCell>\n              <HeaderCell>Name</HeaderCell>\n              <HeaderCell>Description</HeaderCell>\n              <HeaderCell>Manufacturer</HeaderCell>\n              <HeaderCell>Price</HeaderCell>\n              <HeaderCell>Address of Owner</HeaderCell>\n            </Row>\n          </Header>\n          <Body>{this.renderRows()}</Body>\n        </Table>\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>ID</label>\n            <Input\n              value={this.state.id}\n              onChange={event => this.setState({ id: event.target.value })}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Coordinates</label>\n            <Input\n              value={this.state.zipcode}\n              onChange={event => this.setState({ zipcode: event.target.value })}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Amount to stake</label>\n            <Input\n              value={this.state.value}\n              onChange={event =>\n                this.setState({ value: event.target.value })\n              }\n            />\n          </Form.Field>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          <Button loading={this.state.loading} primary>\n            Confirm Purchase!\n          </Button>\n        </Form>\n      </Layout>\n    );\n  }\n}\n\nexport default TransferForm;\n"]},"metadata":{},"sourceType":"module"}