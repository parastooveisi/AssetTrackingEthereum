{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/pages/assets/history.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment, Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Layout from \"../../components/Layout\";\nimport { Card, Button, Table } from \"semantic-ui-react\";\nimport tracker from \"../../ethereum/tracker\";\nimport AssetRow from \"../../components/AssetRow\";\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport Polyline from 'google-map-react';\n\nvar History =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(History, _Component);\n\n  function History() {\n    _classCallCheck(this, History);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(History).apply(this, arguments));\n  }\n\n  _createClass(History, [{\n    key: \"renderMarkers\",\n    value: function renderMarkers(map, maps) {\n      var _this = this;\n\n      var i;\n\n      var _loop = function _loop() {\n        var marker = new maps.Marker({\n          position: _this.props.myLatLng[i],\n          map: map,\n          title: 'Hello World!' + i\n        });\n        var infowindow = new google.maps.InfoWindow({\n          content: \"Owner\" + (i + 1) + \": \" + _this.props.owners[i]\n        });\n        marker.addListener('click', function () {\n          infowindow.open(map, marker);\n        });\n      };\n\n      for (i = 0; i < this.props.myLatLng.length; i++) {\n        _loop();\n      }\n    }\n  }, {\n    key: \"renderPolylines\",\n    value: function renderPolylines(map, maps) {\n      /** Example of rendering geodesic polyline */\n      var geodesicPolyline = new maps.Polyline({\n        path: this.props.myLatLng,\n        geodesic: true,\n        strokeColor: '#00a1e1',\n        strokeOpacity: 1.0,\n        strokeWeight: 4,\n        icons: [{\n          icon: {\n            path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW\n          },\n          offset: '100%',\n          repeat: '20px'\n        }]\n      });\n      geodesicPolyline.setMap(map);\n    }\n  }, {\n    key: \"renderowners\",\n    value: function renderowners() {\n      var items = this.props.owners.map(function (address) {\n        return {\n          header: address,\n          description: \"\",\n          meta: \"Agriculture\",\n          fluid: true\n        };\n      });\n      return __jsx(Card.Group, {\n        items: items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, __jsx(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \" List of all previous owners! \"), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.renderowners()), __jsx(\"div\", {\n        style: {\n          height: '70vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, __jsx(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: 'AIzaSyBJ-5C-ZdpLtLcJ99wDloLSRqmsVxLrLrw'\n        },\n        defaultCenter: this.props.center,\n        defaultZoom: this.props.zoom,\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: function onGoogleApiLoaded(_ref) {\n          var map = _ref.map,\n              maps = _ref.maps;\n          return _this2.renderMarkers(map, maps), _this2.renderPolylines(map, maps);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var lengthOwners, addresscounts, owners, addressArray, myLatLng, address;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(tracker.methods.lengthOwners(props.query.id).call());\n\n            case 2:\n              lengthOwners = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(tracker.methods.zipCounts().call());\n\n            case 5:\n              addresscounts = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(lengthOwners)).fill().map(function (element, index) {\n                return tracker.methods.owners(props.query.id, index).call();\n              })));\n\n            case 8:\n              owners = _context.sent;\n              console.log(owners);\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(addresscounts)).fill().map(function (element, index) {\n                return tracker.methods.zipcodes(props.query.id, index).call();\n              })));\n\n            case 12:\n              addressArray = _context.sent;\n              myLatLng = addressArray.map(function (coords) {\n                var _coords$split$map = coords.split(',').map(Number),\n                    _coords$split$map2 = _slicedToArray(_coords$split$map, 2),\n                    lat = _coords$split$map2[0],\n                    lng = _coords$split$map2[1];\n\n                return {\n                  lat: lat,\n                  lng: lng\n                };\n              });\n              address = {\n                addressArray: addressArray\n              };\n              return _context.abrupt(\"return\", {\n                lengthOwners: lengthOwners,\n                owners: owners,\n                myLatLng: myLatLng\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return History;\n}(Component);\n\n_defineProperty(History, \"defaultProps\", {\n  center: {\n    lat: 52.13,\n    lng: -106.66\n  },\n  zoom: 6\n});\n\nexport default History;","map":{"version":3,"sources":["/home/parastoo/Dropbox/Projects/Ethereum/SupplyChain/pages/assets/history.js"],"names":["React","Fragment","Component","render","Layout","Card","Button","Table","tracker","AssetRow","Geocode","GoogleMapReact","Polyline","History","map","maps","i","marker","Marker","position","props","myLatLng","title","infowindow","google","InfoWindow","content","owners","addListener","open","length","geodesicPolyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","icons","icon","SymbolPath","FORWARD_CLOSED_ARROW","offset","repeat","setMap","items","address","header","description","meta","fluid","renderowners","height","width","key","center","zoom","renderMarkers","renderPolylines","methods","lengthOwners","query","id","call","zipCounts","addresscounts","all","Array","fill","element","index","console","log","zipcodes","addressArray","coords","split","Number","lat","lng"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Layout from \"../../components/Layout\";\nimport { Card, Button, Table } from \"semantic-ui-react\";\nimport tracker from \"../../ethereum/tracker\";\nimport AssetRow from \"../../components/AssetRow\";\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport Polyline from 'google-map-react';\n\n\nclass History extends Component {\n  static defaultProps = {\n    center: {\n      lat: 52.13,\n      lng: -106.66\n    },\n\n    zoom: 6\n  };\n\n  static async getInitialProps(props) {\n    const lengthOwners = await tracker.methods.lengthOwners(props.query.id).call();\n    let addresscounts = await tracker.methods.zipCounts().call()\n\n    let owners = await Promise.all(\n      Array(parseInt(lengthOwners))\n        .fill()\n        .map((element, index) => {\n          return tracker.methods.owners(props.query.id,index).call();\n        })\n    );\n    console.log(owners);\n\n    let addressArray = await Promise.all(\n      Array(parseInt(addresscounts))\n        .fill()\n        .map((element, index) => {\n          return tracker.methods.zipcodes(props.query.id,index).call();\n        })\n    );\n\n  const myLatLng = addressArray.map(coords => {\n    const [lat, lng] = coords.split(',').map(Number);\n    return {\n      lat,\n      lng\n    };\n  });\n\n    const address = {addressArray}\n\n  return {\n    lengthOwners,\n    owners,\n    myLatLng\n  };\n}\nrenderMarkers(map, maps) {\n\n  let i;\n  for(i = 0; i < this.props.myLatLng.length; i++){\n  let marker = new maps.Marker({\n    position: this.props.myLatLng[i],\n    map,\n    title: 'Hello World!' + i\n  });\n  let infowindow = new google.maps.InfoWindow({\n    content: \"Owner\" + (i + 1) + \": \" + this.props.owners[i]\n  });\n  marker.addListener('click', function() {\n    infowindow.open(map, marker);\n  });\n  }\n}\n\nrenderPolylines (map, maps) {\n    /** Example of rendering geodesic polyline */\n    let geodesicPolyline = new maps.Polyline({\n      path: this.props.myLatLng,\n      geodesic: true,\n      strokeColor: '#00a1e1',\n      strokeOpacity: 1.0,\n      strokeWeight: 4,\n      icons: [{\n        icon: {path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW},\n        offset: '100%',\n        repeat: '20px'\n    }]\n    })\n    geodesicPolyline.setMap(map)\n  }\n\nrenderowners() {\n  const items = this.props.owners.map(address => {\n    return {\n      header: address,\n      description: \"\",\n      meta: \"Agriculture\",\n      fluid: true\n    };\n  });\n\n  return <Card.Group items={items} />;\n}\n  render(){\n\n   return(\n     <Layout>\n     <h3> List of all previous owners! </h3>\n     <div>\n     {this.renderowners()}\n     </div>\n     <div style={{ height: '70vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: 'AIzaSyBJ-5C-ZdpLtLcJ99wDloLSRqmsVxLrLrw' }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          yesIWantToUseGoogleMapApiInternals={true}\n          onGoogleApiLoaded={({map, maps}) => (this.renderMarkers(map, maps), this.renderPolylines(map, maps))}\n        >\n        </GoogleMapReact>\n       </div>\n     </Layout>\n  );\n  }\n\n}\nexport default History;\n"]},"metadata":{},"sourceType":"module"}